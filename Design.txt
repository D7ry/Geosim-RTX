So I'd like to make a simple ray tracer with these features:

- CPU
- "Interactive"
- Controllable Camera
- Sphere & Triangle intersections
- Emissive Materials / Area Lights
- Shadows
- Can easily plug in different diffuse models
- Light scattering
- Anti-Aliasing

(for the next ray tracer):
- Accelerated spacial structures
- GPU/CUDA/RTX
- Realtime

Renderer
	render()
	perPixel()
	traceRay()
	checkRayIntersection()

Scene
	geometry[]

Geometry
	position
	scale
	rotation
	primatives[]

Material
	color
	rougness
	opacity?
	
	emissonColor
	emissionStrength

Primitive
	material

	virtual getNormal()

Sphere : Primitive
	radius
	position

Triangle : Primitive
	vertices[3]

Camera
	pos
	up-dir
	forward-dir
	fov

Window
	buffer

Image
	width
	height
	pixels[]

Ray Intersection
	ray*
	intersectedPrimitive*
	t
	intersectionPos

Math
	raySphereIntersection(Ray, Sphere) => Ray Intersection
	rayIntersection(Ray, Sphere) => Ray Intersection

render(Camera, Scene, Image)	// renders scene to Image
	for pixels in Image
		for rays per pixel
			calculate ray position and direction
			send it out	// traceRay()
			average colors

// (taken from Sebastian Lague)
traceRay(Ray, Scene) => Color	// cast ray out into scene and trace it
	
	incoming light = nothing (0, black)	// light going on the the camera / what the camera sees
	ray color = white (1)

	for maxNumBounces
		check for intersection	// checkRayIntersection

		if ray hit
			light emitted from surface color = surface emission color * surface emission strength	// my surfaces material
			light strength = dot(surface normal, ray direction)	// by angle of surface to ray
			incoming light += emitted light * ray color
			color *= material color * light strength
			
			position ray at intersection
			randomize direction within hemisphere
		else
			incoming light +=  environmental light * ray color
			break

	return incoming light

checkRayIntersection(Ray, Scene) => Ray Intersection
	
	intersection = null

	for objects in geometry
		for primitive in object
			transform primitive into world space
			
			if sphere
				test = do ray-sphere intersection test
			if triangle
				test = do ray-triangle intersection test

			if test result is valid and closer than intersection
				intersection = test